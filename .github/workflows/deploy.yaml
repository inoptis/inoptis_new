name: Build and Deploy
on: [push]

jobs:
  check_commit:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_message.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Check commit message
        id: check_message
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if [[ $commit_message == *"#ignore"* ]]; then
            echo "::set-output name=should_run::false"
          else
            echo "::set-output name=should_run::true"
          fi

  build:
    needs: check_commit
    if: needs.check_commit.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set engineer tg username
        run: |
          if [ "${{ github.actor }}" = "IvanGudyushkin" ]; then
            echo "TG_USERNAME=@Ivanandreevichgud" >> $GITHUB_ENV
          fi
          if [ "${{ github.actor }}" = "AlexUner" ]; then
            echo "TG_USERNAME=@AlexUner" >> $GITHUB_ENV
          fi
          if [ "${{ github.actor }}" = "WarningNotError" ]; then
            echo "TG_USERNAME=@eugenroot1" >> $GITHUB_ENV
          fi

      - name: Set custom message bad
        run: echo "CUSTOM_MESSAGE_BAD=üí© ${{ env.TG_USERNAME }}, –∏–¥–∏ —É–±–∏—Ä–∞–π –∫–∞–∫–∞—Ö–∏!" >> $GITHUB_ENV

      - name: Set custom message good
        run: echo "CUSTOM_MESSAGE_GOOD=üèÜ ${{ env.TG_USERNAME }}, –º–æ–ª–æ–¥–µ—Ü!" >> $GITHUB_ENV

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/

      - name: Send Telegram Notification on Failure build
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "üö® 1/2. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!\n${{ env.CUSTOM_MESSAGE_BAD }}\n‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.",
                "reply_markup": {
                  "inline_keyboard": [
                    [
                      {
                        "text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üëÄ",
                        "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    ],
                    [
                      {
                        "text": "–ü–∞–π–¥—É —á–∏–Ω–∏—Ç—å ü•∫",
                        "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}"
                      }
                    ]
                  ]
                }
              }'


      - name: Send Telegram Notification on Success build
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "‚úÖ 1/2. –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n${{ env.CUSTOM_MESSAGE_GOOD }}\n",
                "reply_markup": {
                  "inline_keyboard": [
                    [
                      {
                        "text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üëÄ",
                        "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    ],
                    [
                      {
                        "text": "–ù–∏—à—Ç—è–∫ üëÑ",
                        "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}"
                      }
                    ]
                  ]
                }
              }'

  deploy:
    needs: [check_commit, build]
    if: needs.check_commit.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set engineer tg username
        run: |
          if [ "${{ github.actor }}" = "IvanGudyushkin" ]; then
            echo "TG_USERNAME=@Ivanandreevichgud" >> $GITHUB_ENV
          fi
          if [ "${{ github.actor }}" = "AlexUner" ]; then
            echo "TG_USERNAME=@AlexUner" >> $GITHUB_ENV
          fi
          if [ "${{ github.actor }}" = "WarningNotError" ]; then
            echo "TG_USERNAME=@eugenroot1" >> $GITHUB_ENV
          fi

      - name: Set custom message bad
        run: echo "CUSTOM_MESSAGE_BAD=üí© ${{ env.TG_USERNAME }}, –∏–¥–∏ —É–±–∏—Ä–∞–π –∫–∞–∫–∞—Ö–∏!" >> $GITHUB_ENV

      - name: Set custom message good
        run: echo "CUSTOM_MESSAGE_GOOD=üèÜ ${{ env.TG_USERNAME }}, –º–æ–ª–æ–¥–µ—Ü!" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build

      - name: Install lftp for SFTP
        run: sudo apt-get install lftp

      - name: SFTP Deploy
        run: |
          lftp -e "
          set ssl:verify-certificate no;
          set sftp:auto-confirm yes;
          set net:socket-buffer 524288;
          open ${{ secrets.SFTP_SERVER }};
              user ${{ secrets.SFTP_USERNAME }} ${{ secrets.SFTP_PASSWORD }};
          lcd ./build;

          mirror --reverse --continue --verbose --parallel=10 . ${{ secrets.SITE_FOLDER }};

          bye;
          "

      - name: Clear MODX Cache
        run: curl ${{ secrets.CACHE_REFRESH_API }}

      - name: Send Telegram Notification on Deploy Failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "üö® 2/2. –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!\n${{ env.CUSTOM_MESSAGE_BAD }}\n‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.",
                "reply_markup": {
                  "inline_keyboard": [
                    [
                      {
                        "text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üëÄ",
                        "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    ],
                    [
                      {
                        "text": "–ü–∞–π–¥—É —á–∏–Ω–∏—Ç—å ü•∫",
                        "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}"
                      }
                    ]
                  ]
                }
              }'

      - name: Send Telegram Notification on Deploy Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
                "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
                "text": "üöÄ 2/2. –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n${{ env.CUSTOM_MESSAGE_GOOD }}\n",
                "reply_markup": {
                  "inline_keyboard": [
                    [
                      {
                        "text": "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç!",
                        "url": "https://uner.digital"
                      }
                    ],
                    [
                      {
                        "text": "–ù–∏—à—Ç—è–∫ üëÑ",
                        "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}"
                      }
                    ]
                  ]
                }
              }'