name: Build and Deploy
on: [push]

jobs:
  check_commit:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_message.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check commit message
        id: check_message
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if [[ $commit_message == *"#ignore"* ]]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_commit
    if: needs.check_commit.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set engineer tg username
        run: |
          case "${{ github.actor }}" in
            IvanGudyushkin) echo "TG_USERNAME=@Ivanandreevichgud" >> $GITHUB_ENV ;;
            AlexUner) echo "TG_USERNAME=@AlexUner" >> $GITHUB_ENV ;;
            WarningNotError) echo "TG_USERNAME=@eugenroot1" >> $GITHUB_ENV ;;
          esac

      - name: Set custom messages
        run: |
          echo "CUSTOM_MESSAGE_BAD=üí© ${{ env.TG_USERNAME }}, –∏–¥–∏ —É–±–∏—Ä–∞–π –∫–∞–∫–∞—Ö–∏!" >> $GITHUB_ENV
          echo "CUSTOM_MESSAGE_GOOD=üèÜ ${{ env.TG_USERNAME }}, –º–æ–ª–æ–¥–µ—Ü!" >> $GITHUB_ENV

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/

      - name: Send Telegram Notification on Failure build
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "üö® 1/2. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!\n${{ env.CUSTOM_MESSAGE_BAD }}\n‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.",
            "reply_markup": {
              "inline_keyboard": [
                [
                  { "text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üëÄ", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                ],
                [
                  { "text": "–ü–∞–π–¥—É —á–∏–Ω–∏—Ç—å ü•∫", "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}" }
                ]
              ]
            }
          }'

      - name: Send Telegram Notification on Success build
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "‚úÖ 1/2. –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n${{ env.CUSTOM_MESSAGE_GOOD }}\n",
            "reply_markup": {
              "inline_keyboard": [
                [
                  { "text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üëÄ", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                ],
                [
                  { "text": "–ù–∏—à—Ç—è–∫ üëÑ", "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}" }
                ]
              ]
            }
          }'

  deploy:
    needs: [check_commit, build]
    if: needs.check_commit.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set engineer tg username
        run: |
          case "${{ github.actor }}" in
            IvanGudyushkin) echo "TG_USERNAME=@Ivanandreevichgud" >> $GITHUB_ENV ;;
            AlexUner) echo "TG_USERNAME=@AlexUner" >> $GITHUB_ENV ;;
            WarningNotError) echo "TG_USERNAME=@eugenroot1" >> $GITHUB_ENV ;;
          esac

      - name: Set custom messages
        run: |
          echo "CUSTOM_MESSAGE_BAD=üí© ${{ env.TG_USERNAME }}, –∏–¥–∏ —É–±–∏—Ä–∞–π –∫–∞–∫–∞—Ö–∏!" >> $GITHUB_ENV
          echo "CUSTOM_MESSAGE_GOOD=üèÜ ${{ env.TG_USERNAME }}, –º–æ–ª–æ–¥–µ—Ü!" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build/

      - name: Install lftp for SFTP
        run: sudo apt-get install lftp

      - name: SFTP Deploy
        run: |
          lftp -e "
            set ssl:verify-certificate no;
            set sftp:auto-confirm yes;
            set net:socket-buffer 524288;
            set net:limit-rate 10M:500k;
            set ftp:sync-mode yes;
            set net:max-retries 3;
            set net:reconnect-interval-base 5;
            set ssh:compression yes;
            open ${{ secrets.SFTP_SERVER }};
            user ${{ secrets.SFTP_USERNAME }} ${{ secrets.SFTP_PASSWORD }};
            lcd ./build;

            mirror --reverse --continue --verbose --parallel=4 --only-newer --no-perms . ${{ secrets.SITE_FOLDER }};

            bye;
          "

      - name: Clear MODX Cache
        run: curl ${{ secrets.CACHE_REFRESH_API }}

      - name: Send Telegram Notification on Deploy Failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "üö® 2/2. –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!\n${{ env.CUSTOM_MESSAGE_BAD }}\n‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.",
            "reply_markup": {
              "inline_keyboard": [
                [
                  { "text": "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ üëÄ", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
                ],
                [
                  { "text": "–ü–∞–π–¥—É —á–∏–Ω–∏—Ç—å ü•∫", "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}" }
                ]
              ]
            }
          }'

      - name: Send Telegram Notification on Deploy Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
            "text": "üöÄ 2/2. –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n${{ env.CUSTOM_MESSAGE_GOOD }}\n",
            "reply_markup": {
              "inline_keyboard": [
                [
                  { "text": "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç!", "url": "http://alexaksa.beget.tech" }
                ],
                [
                  { "text": "–ù–∏—à—Ç—è–∫ üëÑ", "callback_data": "DEPLOY_DELETE:${{ env.TG_USERNAME }}" }
                ]
              ]
            }
          }'
